mod std::mem

use std::Optional
use std::Result
use std::string::StringView

ext fn malloc(size: u32) -> {u8}
ext fn free(ptr: {u8})
ext fn realloc(ptr: {u8}, size: u32) -> {u8}
ext fn memcpy(dest: {u8}, src: {u8}, size: u32) -> {u8}
ext fn memset(ptr: {u8}, value: u8, size: u32) -> {u8}

/// A basic heap allocator that can be used to work with heap allocated data.
pub struct Allocator {
    pub fn init<T>(value: T = @null()) -> Result<{T}, StringView> {
        var ptr_or_error = this::init_size(@size<T>())
        if ptr is ptr_or_error.success {
            ptr.* = value
        }
        return ptr_or_error
    }

    pub fn init_size<T>(size: u32) -> Result<{T}, StringView> {
        var ptr = malloc(size) as {T}
        if @is_not_null(ptr) {
            return Result::success(ptr)
        } else {
            return Result::error("Unable to allocate memory")
        }
    }

    /// Re-allocates the heap memory with a new size `size`.
    /// After a successful re-allocation, the new pointer will returned in the Optional value.
    /// If the allocation failed, the function will return an empty Optional.
    pub fn reinit<T>(ptr: {T}, size: u32) -> Optional<{T}> {
        var new_ptr = realloc(ptr as {u8}, size) as {T}
        if @is_not_null(new_ptr) {
            return Optional::value(new_ptr)
        } else {
            return Optional::empty()
        }
    }

    pub fn deinit<T>(ptr: {T}) {
        free(ptr as {u8})
    }

    /// Clones `size` bytes from the `src` into a new heap allocation
    /// and returns a pointer to the new allocation.
    /// If `size` isn't set, it will default to the size of `T`.
    /// Implemented using libc `memcpy`.
    fn clone<T>(src: {T}, size: u32 = @size<T>() as u32) -> Result<{T}, StringView> {
        var ptr_or_error = this::init_size(size)
        if dst is ptr_or_error.success {
            memcpy(dst as {u8}, src as {u8}, size)
        }
        return ptr_or_error
    }

    /// Copies `size` bytes from `src` to `dst`.
    /// If `size` isn't set, it will default to the size of `T`.
    /// Implemented using libc `memcpy`.
    pub fn copy<T>(dst: {T}, src: {T}, size: u32 = @size<T>() as u32) {
        memcpy(dst as {u8}, src as {u8}, size)
    }

    /// Writes `size` bytes of the `value` into the memory in `ptr`.
    /// Implemented using libc `memset`.
    pub fn set<T>(ptr: {T}, value: u8, size: u32) {
        memset(ptr as {u8}, value, size)
    }

    /// Zeros the first `size` bytes of the memory in `ptr`.
    /// Implemented using libc `memset`.
    pub fn zero<T>(ptr: {T}, size: u32) {
        Allocator::set<T>(ptr, 0, size)
    }
}
