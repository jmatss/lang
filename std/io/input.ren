mod std::io

use std::Result
use std::string::String

ext fn _read(fd: i32, buf: {u8}, len: u32) -> i32

// 10 == ascii(\n)
pub fn input(end_delim: u8 = 10) -> Result<String, {u8}> {
    var stdin_fd = 0

    var str_or_error = String::init_size(16)
    if err is str_or_error.error {
        return Result::error(err)
    }
    var str = str_or_error.get_success()

    var buf = 0
    var len = 1
    var res
 
    while true {
        res = _read(stdin_fd, buf.&, len)
        if buf == end_delim or res == 0 or res == -1 {
            break
        }

        str.append_ascii(buf)
    }

    if res != -1 {
        return Result::success(str)
    } else {
        return Result::error("Got error when reading from stdin.")
    }
}

// TODO: Fix, this miscompiles because a block doesn't have a return.   
//       Need to implement logic to check that the loop is infinite. 
/*
var buf = [0]
while true
{
    var len = 1
    var res_read = read(stdin_fd, buf.& as {u8}, len)
    if res_read > 0
    {
        str.&.append_ascii(buf.[0])
    }
    else res_read == 0
    {
        return Result::success(str)
    }
    else
    {
        return Result::error("Got error when reading from stdin.")
    }
}
*/