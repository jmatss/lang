mod std

use std::AsView

ext fn strlen(str: {u8}) -> u32

/// Represents a unmutable "view" of some string-like type.
///
/// `StringView` does not own the string that it points to, so one have to
/// make sure to not have any dangling `StringView`s when the underlying
/// string memory is freed.
pub struct StringView {
    var ptr: {u8}
    var len: u32

    /// Creates a `StringView` from a string literal.
    /// The view will span the length of `len` bytes starting at the offset
    /// `start_idx` from the given literal pointer `str_lit`.
    ///
    /// If no `start_idx` argument is given, it will be set to the default value 0.
    /// If no `len` arguments is given, this function will assume that the given
    /// `str_lit` is null-terminated and calculate the length with `strlen()`.
    ///
    /// OBS! This function does NOT check the validity of the given index and length,
    ///      it is up to the caller to make sure that they are correct.
    pub fn new(str_lit: {u8}, start_idx: u32 = 0, len: u32 = 0) -> StringView {
        if start_idx != 0 {
            str_lit = @ptr_add(str_lit, start_idx)
        }

        if len == 0 {
            len = strlen(str_lit)
        }

        return StringView { str_lit, len }
    }

    pub fn this len() -> u32 {
        return this.len
    }
    
    pub fn {this} eq(other: {StringView}) -> bool {
        if this == other {
            return true;
        } else this.len() != other.len() {
            return false
        }

        const len = this.len()
        const this_ptr = this.ptr
        const other_ptr = other.ptr

        var i = 0
        while i < len {
            var this_b = @ptr_add(this_ptr, i).*
            var other_b = @ptr_add(other_ptr, i).*
            if this_b != other_b {
                return false
            }
            i.++
        }

        return true
    }
}

impl StringView: AsView {
    pub fn {this} as_view() -> StringView {
        return this.*
    }
}
