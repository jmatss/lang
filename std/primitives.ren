/*
 * Auto generated with `generate_primitives.py`, do not edit manually.
 */
mod std

/// Converts a `digit` to ascii.
/// The given `digit` is expected to be a single digit (0-9).
fn digit_to_ascii(digit: u8) -> u8 {
    if digit >= 10 {
        @unreachable()
    }
    return digit + 48 // 48 == '0'
}

pub struct U8 {
    pub fn to_string(number: u8) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 3]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: u8, data: {[u8: 3]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 3]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> u8 {
        return 0
    }

    pub fn max() -> u8 {
        return 255
    }
    
    pub fn abs(number: u8) -> u8 {
        return number
    }
}

pub struct I8 {
    pub fn to_string(number: i8) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 4]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: i8, data: {[u8: 4]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 4]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> i8 {
        return -128
    }

    pub fn max() -> i8 {
        return 127
    }
    
    pub fn abs(number: i8) -> u8 {
        if number >= 0 {
            return number as u8
        } else number == this::min() {
            return ((number + 1) * (-1)) as u8 + 1
        } else {
            return (number * (-1)) as u8
        }
    }
}

pub struct U16 {
    pub fn to_string(number: u16) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 5]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: u16, data: {[u8: 5]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 5]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> u16 {
        return 0
    }

    pub fn max() -> u16 {
        return 65535
    }
    
    pub fn abs(number: u16) -> u16 {
        return number
    }
}

pub struct I16 {
    pub fn to_string(number: i16) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 6]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: i16, data: {[u8: 6]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 6]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> i16 {
        return -32768
    }

    pub fn max() -> i16 {
        return 32767
    }
    
    pub fn abs(number: i16) -> u16 {
        if number >= 0 {
            return number as u16
        } else number == this::min() {
            return ((number + 1) * (-1)) as u16 + 1
        } else {
            return (number * (-1)) as u16
        }
    }
}

pub struct U32 {
    pub fn to_string(number: u32) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 10]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: u32, data: {[u8: 10]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 10]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> u32 {
        return 0
    }

    pub fn max() -> u32 {
        return 4294967295
    }
    
    pub fn abs(number: u32) -> u32 {
        return number
    }
}

pub struct I32 {
    pub fn to_string(number: i32) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 11]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: i32, data: {[u8: 11]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 11]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> i32 {
        return -2147483648
    }

    pub fn max() -> i32 {
        return 2147483647
    }
    
    pub fn abs(number: i32) -> u32 {
        if number >= 0 {
            return number as u32
        } else number == this::min() {
            return ((number + 1) * (-1)) as u32 + 1
        } else {
            return (number * (-1)) as u32
        }
    }
}

pub struct U64 {
    pub fn to_string(number: u64) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 19]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: u64, data: {[u8: 19]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 19]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> u64 {
        return 0
    }

    pub fn max() -> u64 {
        return 18446744073709551615
    }
    
    pub fn abs(number: u64) -> u64 {
        return number
    }
}

pub struct I64 {
    pub fn to_string(number: i64) -> Result<String, {u8}> {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 20]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var str_len
        if is_negative {
            str_len = buf_idx + 1
        } else {
            str_len = buf_idx
        }

        var str_or_error = String::init_size(str_len)
        if err is str_or_error.error {
            return Result::error(err)
        }
        var str = str_or_error.&.get_success()

        if is_negative {
            str.&.append_ascii(45) // 45 == '-'
        }

        var idx = buf_idx - 1
        while true {
            var ascii = buf.[idx]
            str.&.append_ascii(ascii)

            if idx == 0 {
                break
            }

            idx.--
        }

        return Result::success(str)
    }

    pub fn to_string_view(number: i64, data: {[u8: 20]}) -> StringView {
        var is_negative = number < 0
        var number_abs = this::abs(number)

        var buf: [u8: 20]
        var buf_idx = 0

        while true {
            var digit = number_abs % 10
            var ascii = digit_to_ascii(digit as u8)
            buf.[buf_idx] = ascii
            buf_idx.++

            number_abs /= 10
            if number_abs == 0 {
                break
            }
        }

        var data_idx = 0
        if is_negative {
            data.*.[data_idx] = 45 // 45 == '-'
            data_idx.++
        }

        buf_idx.--
        while true {
            var ascii = buf.[buf_idx]
            data.*.[data_idx] = ascii
            data_idx.++

            if buf_idx == 0 {
                break
            }

            buf_idx.--
        }

        return StringView::new(data as {u8}, 0, data_idx)
    }

    pub fn min() -> i64 {
        return -9223372036854775808
    }

    pub fn max() -> i64 {
        return 9223372036854775807
    }
    
    pub fn abs(number: i64) -> u64 {
        if number >= 0 {
            return number as u64
        } else number == this::min() {
            return ((number + 1) * (-1)) as u64 + 1
        } else {
            return (number * (-1)) as u64
        }
    }
}

