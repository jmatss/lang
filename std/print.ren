mod std

use std::types::Result
use std::types::StringView

ext fn _write(fd: i32, data: {u8}, len: u32) -> i32
ext fn fflush(fd: i32) -> i32

pub fn print_fd(
    str_view: StringView,
    fd: i32,
    line_break: bool = true,
    flush: bool = false,
) -> Result<u32, {u8}>
{
    if _write(fd, str_view.ptr, str_view.len()) == -1
    {
        return Result::error("Error when writing to fd")
    }
    
    if line_break
    {
        // TODO: Make static variable containing value instead.
        var ascii = 10  // \n
        if _write(fd, ascii.&, 1) == -1
        {
            return Result::error("Error when writing line break to fd")
        }
    }
    
    if flush and fflush(fd) == -1
    {
        return Result::error("Error when flushing to fd")
    }

    return Result::success(0)
}

pub fn print(str_view: StringView, line_break: bool = true, flush: bool = false) -> Result<u32, {u8}>
{
    var stdout_fd = 1
    return print_fd(str_view, stdout_fd, line_break)
}

pub fn eprint(str_view: StringView, line_break: bool = true, flush: bool = false) -> Result<u32, {u8}>
{
    var stderr_fd = 2
    return print_fd(str_view, stderr_fd, line_break)
}
