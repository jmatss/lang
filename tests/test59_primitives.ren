fn main() -> int {
    var min_u8 = u8::min()
    var abs_u8 = (1 as u8).abs()
    std::io::print(@format("min_u8: {}, abs_u8: {}", min_u8, abs_u8).as_view())
    std::assert(min_u8 == 0 and abs_u8 == 1)

    var min_i8 = i8::min()
    var abs_i8 = (-1 as i8).abs()
    std::io::print(@format("min_i8: {}, abs_i8: {}", min_i8, abs_i8).as_view())
    std::assert(min_i8 == -128 and abs_i8 == 1)

    var min_u16 = u16::min()
    var abs_u16 = (1 as u16).abs()
    std::io::print(@format("min_u16: {}, abs_u16: {}", min_u16, abs_u16).as_view())
    std::assert(min_u16 == 0 and abs_u16 == 1)

    var min_i16 = i16::min()
    var abs_i16 = (-1 as i16).abs()
    std::io::print(@format("min_i16: {}, abs_i16: {}", min_i16, abs_i16).as_view())
    std::assert(min_i16 == -32768 and abs_i16 == 1)

    var min_u32 = u32::min()
    var abs_u32 = (1 as u32).abs()
    std::io::print(@format("min_u32: {}, abs_u32: {}", min_u32, abs_u32).as_view())
    std::assert(min_u32 == 0 and abs_u32 == 1)

    var min_i32 = i32::min()
    var abs_i32 = (-1 as i32).abs()
    std::io::print(@format("min_i32: {}, abs_i32: {}", min_i32, abs_i32).as_view())
    std::assert(min_i32 == -2147483648 and abs_i32 == 1)

    var min_u64 = u64::min()
    var abs_u64 = (1 as u64).abs()
    std::io::print(@format("min_u64: {}, abs_u64: {}", min_u64, abs_u64).as_view())
    std::assert(min_u64 == 0 and abs_u64 == 1)

    var min_i64 = i64::min()
    var abs_i64 = (-1 as i64).abs()
    std::io::print(@format("min_i64: {}, abs_i64: {}", min_i64, abs_i64).as_view())
    std::assert(min_i64 == -9223372036854775808 and abs_i64 == 1)

    return 0
}
