struct TestStruct {
    fn test_method<T>(x: T) { }
}

struct TestGenStruct<T> {
    fn test_method(x: T) { }
}

struct TestDoubleGenStruct<T> {
    var x: T
    fn this test_method<F>(z: F) { }
}

fn test_fn<T>(x: T) { }

fn main() -> i32 {
    // TODO: Implement inference of method and function
    //       generics if not specified.

    var one = 1 as u8
    //var ts = TestStruct::test_method(one)

    var two = 2 as i64
    //var tgs = TestGenStruct::test_method(two)

    var three = 3. as f32
    var tdgs = TestDoubleGenStruct { three }

    var four = 4 as u32
    //tdgs.test_method(four)

    var five = 5. as f64
    test_fn(five)

    return 0
}