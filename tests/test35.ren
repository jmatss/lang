ext fn printf(format: {u8}, ...) -> i32
ext fn strcmp(s1: {u8}, s2: {u8}) -> i32

struct TestStruct<T> {
    var a: i64
    var b: T

    fn this generic_size() -> u32 {
        return @size<T>()
    }
}


fn main() -> i32 {
    var ts = TestStruct<f64> { 123, 456. }
    var size_inner = ts.generic_size()

    var size_i = @size<i32>()
    var size_f = @size<f64>()
    var size_s = @size<TestStruct<f32>>()

    // Size in bytes, so might not be true for all architectures.
    printf("i32 size: %d", size_i)
    std::assert(size_i == 4)

    printf("\nf64 size: %d", size_f)
    std::assert(size_f == 8)

    printf("\nTestStruct{i64,f32} size: %d", size_s)
    std::assert(size_s == 16)

    printf("\ninner size (f64): %d", size_inner)
    std::assert(size_inner == 8)


    var int_1: i16 = 123
    var int_2: @type(int_1) = 456  // No assert, just make sure that it compiles.
    var size_t = @size<@type(int_1)>()

    printf("\nsize_t(i16) size: %d", size_t)
    std::assert(size_t == 2)


    //              21          33
    var column_nr = @column() + @column()
    var line_nr = @line()
    var filename = @file()

    printf("\ncolumn_nr: %d", column_nr)
    std::assert(column_nr == 21 + 33)

    printf("\nline_nr: %d", line_nr)
    std::assert(line_nr == 46)

    printf("\nfilename: %s", filename)
    std::assert(strcmp(filename, "test35.ren") == 0)


    var null_i: i64 = @null<i64>()
    var null_s: TestStruct<f64> = @null<TestStruct<f64>>()

    printf("\nnull_i: %lld", null_i)
    std::assert(null_i == 0)

    printf("\nnull_s.a: %lld", null_s.a)
    std::assert(null_s.a == 0)
    printf("\nnull_s.b: %f", null_s.b)
    std::assert(0.0 == null_s.b)


    var null_ptr: {u64} = @null<{u64}>()
    printf("\n@is_null(null_ptr): ")
    if @is_null(null_ptr) { printf("true") } else { printf("false") }
    std::assert(@is_null(null_ptr))


    var var_name = 1
    var var_name_content = @name(var_name)
    printf("\nvar_name: %s", var_name_content)
    std::assert(strcmp(@name(var_name), "var_name") == 0)


    if false {
        @unreachable()
    }

    return 0
}