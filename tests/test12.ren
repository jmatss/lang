ext fn printf(format: {u8}, ...) -> i32
ext fn malloc(size: u32) -> {u8}

fn double(n: {i32})
{
   n.* *= 2
}

struct TestStruct
{
    a: i32,
    b: f64,
}

struct TestArrayStruct
{
    a: i32,
    b: {[i32: 2]},
}

fn main() -> i32
{
    var x1 = [[1.1, 2.2], [3.3, 4.4]]

    var f64_var: f64 = 3.3
    x1.[1].[0] = 5.5 + f64_var

    printf(
        "\nx1.[0].[0]: %f, x1.[0].[1]: %f, x1.[1].[0]: %f, x1.[1].[1]: %f",
        x1.[0].[0] as f64,
        x1.[0].[1] as f64,
        x1.[1].[0] as f64,
        x1.[1].[1] as f64,
    )
    std::assert(x1.[0].[0] == 1.1 and x1.[0].[1] == 2.2 and x1.[1].[0] == 8.8 and x1.[1].[1] == 4.4)


    var x2 = [1, 2, 3]
    var i = 0
    while i < 3
    {
        double(x2.[i].&)
        i += 1
    }
    printf("\nx2.[0]: %d, x2.[1] %d, x2.[2]: %d", x2.[0], x2.[1], x2.[2])
    std::assert(x2.[0] == 2 and x2.[1] == 4 and x2.[2] == 6)


    var x3 = [ TestStruct { 12, 34.5 } ]
    x3.[0].b = 123.456
    var tmp_var = x3.[0].b
    printf("\nx3.[0].b: %f", x3.[0].b)
    std::assert(x3.[0].b == 123.456)


    var heap_array = malloc(8) as {[i32: 2]}
    heap_array.* = [12, 24]
    printf("\nheap_array.*.[0]: %d, (heap_array.*).[1]: %d", heap_array.*.[0], (heap_array.*).[1])
    std::assert(heap_array.*.[0] == 12 and (heap_array.*).[1] == 24)

    var abc = TestArrayStruct { 456, heap_array }
    printf("\nabc.a: %d, abc.b.*.[0]: %d, abc.b.*.[1]: %d", abc.a, abc.b.*.[0], abc.b.*.[1])
    std::assert(abc.a == 456 and abc.b.*.[0] == 12 and abc.b.*.[1] == 24)


    return 0
}
