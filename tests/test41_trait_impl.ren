// TODO:
// 1. Make specifying a "unknown" function (that isn't defined in the trait)
//    inside the trait impl block a error.
// 2. Currently only the function are checked to exists, the impl blocks aren't
//    really verified. So one doesn't even have to create impl blocks for the
//    traits, one can write the functions inside the regular struct impl block.
//    Fix this.

trait TestTrait {
    fn this trait_func(i: i8) -> u64
}

struct TestStruct<T: TestTrait> {
    var inner: T
}

struct InnerStructWithTrait;
impl InnerStructWithTrait: TestTrait {
    fn this trait_func(i: i8) -> u64 {
        return 123
    }

    // TODO: Create error for methods in trait impl
    //       that doesn't exist in the trait.
    /*
    fn abc() -> i32 {
        return 1
    }
    */
}

struct InnerStructWithoutTrait;

fn main() -> int {
    // Should produce a error since u64 doesn't implement TestTrait
    //var ts = TestStruct<u64> { 34 }
    
    // Should produce a error since "InnerStructWithoutTrait" doesn't
    // implement TestTrait which is enforced by TestStruct<T> on T.
    //var ts = TestStruct { InnerStructWithoutTrait {} }

    var ts = TestStruct { InnerStructWithTrait {} }

    return 0
}

struct UnimplementedStruct<K, V>
where
    K: TestTrait
    V: TestTrait
{
    var key: K
    var val: V
}