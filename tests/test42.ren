use std::Allocator
use std::Ptr
use std::Disposable

ext fn printf(format: {u8}, ...) -> i32

enum ErrorKind {
    FIRST
    SECOND
}

struct Error {
    var kind: ErrorKind
    var msg: {u8}
    
    /// Keeps track of the state of `msg`.
    /// If `msg` needs to be deallocated, this will be set to `true`.
    var msg_needs_deinit: bool
}

impl Error: Disposable {
    fn {this} deinit() {
        if this.msg_needs_deinit {
            Allocator::deinit<u8>(this.msg)
            this.msg_needs_deinit = false
        }
    }
}

fn main() -> i32 {
    var kind
    var msg
    var msg_or_error
    var needs_deinit

    kind = ErrorKind::FIRST
    msg = c"A stack allocated error message."
    needs_deinit = false
    var stack_err = Error { kind, msg, needs_deinit }

    kind = ErrorKind::SECOND
    msg_or_error = Allocator::clone<u8>(c"A heap allocated error message.", 32)
    msg = msg_or_error.get_success()
    needs_deinit = true
    var heap_err = Error { kind, msg, needs_deinit }

    printf(c"Stack: %s", stack_err.msg)
    printf(c"\nHeap: %s", heap_err.msg)

    heap_err.deinit()

    return 0
}