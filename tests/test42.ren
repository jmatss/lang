use std::mem::Allocator
use std::mem::Disposable
use std::mem::Ptr

extern fn printf(format: {u8}, ...) -> i32
extern fn strlen(str: {u8}) -> i32

enum ErrorKind
{
    FIRST,
    SECOND,
}

struct Error
{
    kind: ErrorKind,
    msg: {u8},
    
    /// Keeps track of the state of `msg`.
    /// If `msg` needs to be deallocated, this will be set to `true`.
    msg_needs_deinit: bool,
}

impl Disposable for Error
{
    fn {this} deinit()
    {
        if this.*.msg_needs_deinit
        {
            Allocator::deinit<u8>(this.*.msg)
            this.*.msg_needs_deinit = false
        }
    }
}

fn main() -> i32
{
    var kind
    var msg
    var needs_deinit

    kind = ErrorKind::FIRST
    msg = "A stack allocated error message."
    needs_deinit = false
    var stack_err = Error { kind, msg, needs_deinit }

    kind = ErrorKind::SECOND
    msg = Allocator::clone<u8>("A heap allocated error message.", 32)
    needs_deinit = true
    var heap_err = Error { kind, msg, needs_deinit }

    printf("Stack: %s", stack_err.msg)
    printf("\nHeap: %s", heap_err.msg)

    var a = Ptr::init(heap_err)
    a.&.deinit()

    return 0
}