//use std.assert

struct TestStruct<T>
{
    inner: T,
}

struct TestStructTwo<K, V>
{
    key: K,
    value: {V},
}

struct UnImplemented<U>
{
    unimplemented: U,
}

function main() -> i32
{
    var i: u64 = 1
    var f: f32 = 123.
    
    var test_struct_u64 = TestStruct { i }
    var test_struct_f32 = TestStruct { f }

    var expected_u64: u64 = 1
    var expected_f32: f32 = 123.
    
    /*
    assert(expected_u64 == test_struct_u64.inner)
    assert_equals_f64(expected_f32 as f64, test_struct_f32.inner as f64, 0.01)
    
    printf(
        "test_struct_u64.inner: %lld, test_struct_f32.inner(as f64): %f",
        test_struct_u64.inner,
        test_struct_f32.inner as f64
    )
    */
    
    var key = "Key"
    var value: u8 = 5
    
    var test_struct_two = TestStructTwo { key, value.& }
    
    return 0
}