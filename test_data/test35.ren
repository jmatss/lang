use std.assert

external function strcmp(s1: {u8}, s2: {u8}) -> i32

struct TestStruct<T>
{
    a: i64,
    b: T,
}

implement TestStruct
{
    function this generic_size() -> u32
    {
        return @size<T>()
    }
}

function main() -> i32
{
    var ts = TestStruct<f64> { 123, 456. }
    var size_inner = ts.generic_size()

    var size_i = @size<i32>()
    var size_f = @size<f64>()
    var size_s = @size<TestStruct<f32>>()

    //var i: i16 = 123
    //var ty = @type(i)

    // Size in bytes, so might not be true for all architectures.
    printf("i32 size: %d", size_i)
    assert(size_i == 4)

    printf("\nf64 size: %d", size_f)
    assert(size_f == 8)

    printf("\nTestStruct{i64,f32} size: %d", size_s)
    assert(size_s == 16)

    printf("\ninner size (f64): %d", size_inner)
    assert(size_inner == 8)

    //              21          33
    var column_nr = @column() + @column()
    var line_nr = @line()
    var filename = @file()

    printf("\ncolumn_nr: %d", column_nr)
    assert(column_nr == 21 + 33)

    printf("\nline_nr: %d", line_nr)
    assert(line_nr == 46)

    printf("\nfilename: %s", filename)
    assert(strcmp(filename, "test35.ren") == 0)

    return 0
}