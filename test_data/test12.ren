external function printf(format: {u8}, ...) -> i32
external function malloc(size: i32) -> {void}

function double(n: {i32})
{
    n.* *= 2
}

struct TestStruct
{
    a: i32,
    b: i32,
}

struct TestArrayStruct
{
    a: i32,
    b: {[i32: 2]},
}

function main() -> int
{
    //var x = [1, 2, 3]
    //printf("1: %d", x.[1])

    //var x = [1, 2, 3]
    //var i = 0
    //while i < 3
    //{
    //    double(x.[i].&)
    //    i++
    //}
    //printf("0: %d\n1: %d\n2: %d", x.[0], x.[1], x.[2])

    //var x = [TestStruct{ 12, 34 }]
    //printf("Result: %d", x.[0].a)

    var heap_array = malloc(8) as {[i32: 2]}
    heap_array.* = [12, 24]
    //printf("first: %d - %d", heap_array.*.[0], (heap_array.*).[1])
    var abc = TestArrayStruct { 456, heap_array }
    printf("a: %d\nb: %d - %d", abc.a, abc.b.*.[0], abc.b.*.[1])

    return 123
}