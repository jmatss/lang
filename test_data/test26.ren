extern fn printf(format: {u8}, ...) -> i32

struct TestStruct
{
    x: i32,
}

impl TestStruct
{
    fn {this} inc() -> u64
    {
        this.*.x += 1
        return this.*.x as u64
    }

    fn this inc_by_val() -> u64
    {
        this.x += 1
        return this.x as u64
    }

    fn static_inc(arg: i32) -> u64
    {
        return (arg + 1) as u64
    }
}

fn main() -> i32
{
    var test_struct = TestStruct { 5 }

    var by_ref = test_struct.&.inc()
    printf("by_ref: %llu, test_struct.x: %d", by_ref, test_struct.x)
    std::assert(by_ref == 6)
    std::assert(test_struct.x == 6)

    var by_val = test_struct.inc_by_val()
    printf("\nby_val: %llu, test_struct.x: %d", by_val, test_struct.x)
    std::assert(by_val == 7)
    std::assert(test_struct.x == 6)

    var by_static = TestStruct::static_inc(5)
    printf("\nby_static: %llu", by_static)
    std::assert(by_static == 6)

    return 0
}