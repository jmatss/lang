import <stdio.h>
import <stdlib.h>
import "j_stack.h"

PONTER_SIZE u32                = 8
FIGURES_OUT_SIZE_AND_TYPE []   = [1, 2, 3]
FIGURES_OUT_SIZE          [u8] = [1, 2, 3]
FIGURES_OUT_TYPE          [8]  = ["abc", "def"]
FIGURES_OUT_BOTH               = ['å', 'ä', 'ö']

class Stack
{
    items    ptr<mut<any>>
    position mut<u64>
    capacity mut<u64>

	###
		Creates and allocates heap space for the "stack".
	###
	create(capacity i64) -> ptr<Stack>
	{
		return null when (capacity <= 0)
		if (capacity <= 0) return null
		
		if (capacity <= 0)
		{
			return null
		}
		
		# "when" with expression required ending "else", for "statement" does not.
		x := 123 if (y >= 3) else 456
		x := 123 when (y >= 3) else 456

		stack ptr<Stack> := ptr(Stack(null, 0, capacity))
		stack ptr<Stack> := ptr Stack(null, 0, capacity)
		stack            := heap Stack(items=null, position=0, capacity=capacity)
		if (stack == null)
		{
			return null
		}

		items ptr<mut<any>> = malloc(PONTER_SIZE * capacity)
		if (items == NULL)
		{
			free(stack)
			return NULL
		}

		stack->capacity = capacity
		stack->position = 0
		stack->items = items

		return stack
	}

	/**
	 *	Frees the allocated heap memory.
	 */
	void stack_free(Stack *stack)
	{
		if (stack != NULL)
		{
			free(stack->items)
			free(stack)
		}
	}

	static int increaseCapacity(Stack *stack)
	{
		int newCapacity = stack->capacity * 2
		void* newItems = realloc(stack->items, PONTER_SIZE * newCapacity)
		if (newItems == NULL)
		{
			return -1
		}

		stack->items = newItems
		stack->capacity = newCapacity

		return 0
	}

	/**
	 *	Pushes item to the "stack". If it is full, double the size.
	 *  Returns 0 to indicate success, -1 to indicate error.
	 */
	int stack_push(Stack *stack, void *item)
	{
		if (stack == NULL)
		{
			return -1
		}

		// Double the size of Stack if it reaches full capacity.
		if (stack->position >= stack->capacity)
		{
			// If unable to increase capacity, returns -1 to indicate error.
			int result = increaseCapacity(stack)
			if (result < 0)
			{
				return -1
			}
		}

		stack->items[stack->position++] = item

		return 0
	}

	/**
	 *	Returns NULL if the "stack" is empty.
	 */
	void *stack_pop(Stack *stack)
	{
		if (stack == NULL)
		{
			return NULL
		}

		if (stack->position <= 0)
		{
			return NULL
		}

		return stack->items[--stack->position]
	}

	int stack_getPosition(Stack *stack)
	{
		if (stack == NULL)
		{
			return -1
		}

		return stack->position
	}

	int stack_getCapacity(Stack *stack)
	{
		if (stack == NULL)
		{
			return -1
		}

		return stack->capacity
	}
}